Index: src/main/java/com/betha/projeto/projeto/resource/CidadeDTO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.betha.projeto.projeto.resource;\n\npublic class CidadeDTO {\n    private Long id;\n    private String nome;\n\n    public CidadeDTO(Long id, String nome) {\n        this.id = id;\n        this.nome = nome;\n    }\n\n    public Long getId() {\n        return id;\n    }\n\n    public void setId(Long id) {\n        this.id = id;\n    }\n\n    public String getNome() {\n        return nome;\n    }\n\n    public void setNome(String nome) {\n        this.nome = nome;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/betha/projeto/projeto/resource/CidadeDTO.java b/src/main/java/com/betha/projeto/projeto/resource/CidadeDTO.java
--- a/src/main/java/com/betha/projeto/projeto/resource/CidadeDTO.java	(revision bba8dec6cf8795bdf68e6991b2ccf6612773587f)
+++ b/src/main/java/com/betha/projeto/projeto/resource/CidadeDTO.java	(date 1635604694099)
@@ -1,12 +1,13 @@
 package com.betha.projeto.projeto.resource;
 
+import com.betha.projeto.projeto.model.Cidade;
+
 public class CidadeDTO {
     private Long id;
     private String nome;
 
-    public CidadeDTO(Long id, String nome) {
-        this.id = id;
-        this.nome = nome;
+    public CidadeDTO() {
+
     }
 
     public Long getId() {
@@ -24,4 +25,18 @@
     public void setNome(String nome) {
         this.nome = nome;
     }
+
+    public static CidadeDTO toDTO (Cidade cidade){
+        CidadeDTO dto = new CidadeDTO();
+        dto.setId(cidade.getId());
+        dto.setNome(cidade.getNome());
+        return dto;
+    }
+
+    public static Cidade fromDTO (CidadeDTO dto){
+        Cidade entity = new Cidade();
+        entity.setId(dto.getId());
+        entity.setNome(dto.getNome());
+        return entity;
+    }
 }
Index: src/main/java/com/betha/projeto/projeto/resource/EstadoDTO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.betha.projeto.projeto.resource;\n\npublic class EstadoDTO {\n    String id;\n    String nome;\n    String pais;\n\n    public EstadoDTO(String id, String nome, String pais) {\n        this.id = id;\n        this.nome = nome;\n        this.pais = pais;\n    }\n\n    public String getId() {\n        return id;\n    }\n\n    public void setId(String id) {\n        this.id = id;\n    }\n\n    public String getNome() {\n        return nome;\n    }\n\n    public void setNome(String nome) {\n        this.nome = nome;\n    }\n\n    public String getPais() {\n        return pais;\n    }\n\n    public void setPais(String pais) {\n        this.pais = pais;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/betha/projeto/projeto/resource/EstadoDTO.java b/src/main/java/com/betha/projeto/projeto/resource/EstadoDTO.java
--- a/src/main/java/com/betha/projeto/projeto/resource/EstadoDTO.java	(revision bba8dec6cf8795bdf68e6991b2ccf6612773587f)
+++ b/src/main/java/com/betha/projeto/projeto/resource/EstadoDTO.java	(date 1635603930899)
@@ -1,5 +1,8 @@
 package com.betha.projeto.projeto.resource;
 
+
+import com.betha.projeto.projeto.model.Estado;
+
 public class EstadoDTO {
     String id;
     String nome;
@@ -10,6 +13,9 @@
         this.nome = nome;
         this.pais = pais;
     }
+    public EstadoDTO() {
+
+    }
 
     public String getId() {
         return id;
@@ -34,4 +40,17 @@
     public void setPais(String pais) {
         this.pais = pais;
     }
+
+    public static EstadoDTO toDTO (Estado estado){
+        EstadoDTO dto = new EstadoDTO();
+        dto.setId(estado.getId());
+        dto.setNome(estado.getNome());
+        return dto;
+    }
+
+    public static Estado fromDTO (EstadoDTO dto){
+        Estado entity = new Estado();
+        entity.setNome(dto.getNome());
+        return entity;
+    }
 }
Index: src/main/java/com/betha/projeto/projeto/resource/EstoqueDTO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.betha.projeto.projeto.resource;\n\npublic class EstoqueDTO {\n    Long id;\n    String descricao;\n\n    public EstoqueDTO(Long id, String descricao) {\n        this.id = id;\n        this.descricao = descricao;\n    }\n\n    public Long getId() {\n        return id;\n    }\n\n    public void setId(Long id) {\n        this.id = id;\n    }\n\n    public String getDescricao() {\n        return descricao;\n    }\n\n    public void setDescricao(String descricao) {\n        this.descricao = descricao;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/betha/projeto/projeto/resource/EstoqueDTO.java b/src/main/java/com/betha/projeto/projeto/resource/EstoqueDTO.java
--- a/src/main/java/com/betha/projeto/projeto/resource/EstoqueDTO.java	(revision bba8dec6cf8795bdf68e6991b2ccf6612773587f)
+++ b/src/main/java/com/betha/projeto/projeto/resource/EstoqueDTO.java	(date 1635604694108)
@@ -1,5 +1,8 @@
 package com.betha.projeto.projeto.resource;
 
+
+import com.betha.projeto.projeto.model.Estoque;
+
 public class EstoqueDTO {
     Long id;
     String descricao;
@@ -9,6 +12,9 @@
         this.descricao = descricao;
     }
 
+    public EstoqueDTO() {
+    }
+
     public Long getId() {
         return id;
     }
@@ -24,4 +30,15 @@
     public void setDescricao(String descricao) {
         this.descricao = descricao;
     }
+    public static EstoqueDTO toDTO (Estoque estoque){
+        EstoqueDTO dto = new EstoqueDTO();
+        dto.setId(estoque.getId());
+        return dto;
+    }
+
+    public static Estoque fromDTO (EstoqueDTO dto){
+        Estoque entity = new Estoque();
+        entity.setId(dto.getId());
+        return entity;
+    }
 }
Index: src/main/java/com/betha/projeto/projeto/model/Movimentacao.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.betha.projeto.projeto.model;\n\nimport com.betha.projeto.projeto.enterprise.AbstractEntity;\n\nimport javax.persistence.Column;\nimport javax.persistence.Entity;\nimport javax.persistence.JoinColumn;\nimport javax.persistence.ManyToOne;\n\n@Entity\npublic class Movimentacao extends AbstractEntity {\n    @Column(name=\"Tipo_de_movimentacao\")\n    private String tipo;\n    @ManyToOne\n    @JoinColumn(name = \"I_MERCADORIA\",referencedColumnName = \"ID\")\n    private Mercadoria mercadoria;\n    @Column(name=\"quantidade\")\n    private Double quantidade;\n    @Column (name = \"Pagamento\")\n    private Pagamento pagamento;\n\n\n    public Movimentacao() {\n    }\n\n\n    public String getTipo() {\n        return tipo;\n    }\n\n    public void setTipo(String tipo) {\n        this.tipo = tipo;\n    }\n\n    public Mercadoria getMercadoria() {\n        return mercadoria;\n    }\n\n    public void setMercadoria(Mercadoria mercadoria) {\n        this.mercadoria = mercadoria;\n    }\n\n    public Double getQuantidade() {\n        return quantidade;\n    }\n\n    public void setQuantidade(Double quantidade) {\n        this.quantidade = quantidade;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/betha/projeto/projeto/model/Movimentacao.java b/src/main/java/com/betha/projeto/projeto/model/Movimentacao.java
--- a/src/main/java/com/betha/projeto/projeto/model/Movimentacao.java	(revision bba8dec6cf8795bdf68e6991b2ccf6612773587f)
+++ b/src/main/java/com/betha/projeto/projeto/model/Movimentacao.java	(date 1635601162321)
@@ -10,7 +10,7 @@
 @Entity
 public class Movimentacao extends AbstractEntity {
     @Column(name="Tipo_de_movimentacao")
-    private String tipo;
+    private TipoMovimentacao tipo;
     @ManyToOne
     @JoinColumn(name = "I_MERCADORIA",referencedColumnName = "ID")
     private Mercadoria mercadoria;
@@ -24,11 +24,11 @@
     }
 
 
-    public String getTipo() {
+    public TipoMovimentacao getTipo() {
         return tipo;
     }
 
-    public void setTipo(String tipo) {
+    public void setTipo(TipoMovimentacao tipo) {
         this.tipo = tipo;
     }
 
Index: src/main/java/com/betha/projeto/projeto/resource/ClienteDTO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.betha.projeto.projeto.resource;\n\npublic class ClienteDTO {\n    private String cpf;\n    private String nome;\n    private String rg;\n\n    public ClienteDTO(String cpf, String nome, String rg) {\n        this.cpf = cpf;\n        this.nome = nome;\n        this.rg = rg;\n    }\n\n    public String getCpf() {\n        return cpf;\n    }\n\n    public void setCpf(String cpf) {\n        this.cpf = cpf;\n    }\n\n    public String getNome() {\n        return nome;\n    }\n\n    public void setNome(String nome) {\n        this.nome = nome;\n    }\n\n    public String getRg() {\n        return rg;\n    }\n\n    public void setRg(String rg) {\n        this.rg = rg;\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/betha/projeto/projeto/resource/ClienteDTO.java b/src/main/java/com/betha/projeto/projeto/resource/ClienteDTO.java
--- a/src/main/java/com/betha/projeto/projeto/resource/ClienteDTO.java	(revision bba8dec6cf8795bdf68e6991b2ccf6612773587f)
+++ b/src/main/java/com/betha/projeto/projeto/resource/ClienteDTO.java	(date 1635601417069)
@@ -5,6 +5,9 @@
     private String nome;
     private String rg;
 
+    public ClienteDTO() {
+    }
+
     public ClienteDTO(String cpf, String nome, String rg) {
         this.cpf = cpf;
         this.nome = nome;
Index: src/main/java/com/betha/projeto/projeto/resource/CidadeController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.betha.projeto.projeto.resource;\n\nimport com.betha.projeto.projeto.model.Cidade;\nimport com.betha.projeto.projeto.repository.CidadeRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.validation.FieldError;\nimport org.springframework.web.bind.MethodArgumentNotValidException;\nimport org.springframework.web.bind.annotation.*;\n\nimport javax.persistence.EntityNotFoundException;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.stream.Collector;\nimport java.util.stream.Collectors;\n\n@RestController\n@RequestMapping (\"/api/cidades\")\npublic class CidadeController {\n\n    @Autowired\n    private CidadeRepository repository;\n\n    @GetMapping\n    public List<CidadeDTO> getCidades() {\n\n        return repository.findAll().stream().map(c -> CidadeDTO.toDTO(c)).collect(Collectors.toList());\n    }\n\n    @GetMapping(\"/{id}\")\n    public Cidade getCidadesId(@PathVariable(value = \"id\") Long cidadeId, @RequestBody Cidade cidade) throws EntityNotFoundException {\n        Cidade cidadeFind = repository.findById(cidadeId).orElseThrow(() ->new EntityNotFoundException(\"Cidade não encontrado com ID::\" +cidadeId));\n        return cidadeFind;\n    }\n\n    @PostMapping\n    public Cidade create(@RequestBody Cidade cidade) {\n        return repository.save(cidade);\n    }\n\n    @PutMapping(\"/{id}\")\n    public Cidade update(@PathVariable(value = \"id\") Long cidadeId, @RequestBody Cidade cidade) throws EntityNotFoundException {\n        Cidade cidadeFind = repository.findById(cidadeId).orElseThrow(() -> new EntityNotFoundException(\"Cidade não encontrada com 10::  \"+cidadeId));\n        cidadeFind.setId(cidade.getId());\n        cidadeFind.setNome(cidade.getNome());\n\n        return repository.save(cidadeFind);\n\n    }\n\n    @DeleteMapping(\"/{id}\")\n    public ResponseEntity delete(@PathVariable(value = \"id\") Long id) throws EntityNotFoundException {\n        Cidade cidadeFind = repository.findById(id)\n                .orElseThrow(() -> new EntityNotFoundException(\"Cidade não encontrada com ID::\" + id));\n\n        repository.delete(cidadeFind);\n        return ResponseEntity.noContent().build();\n    }\n\n    @ResponseStatus(HttpStatus.BAD_REQUEST)\n    @ExceptionHandler(MethodArgumentNotValidException.class)\n   public Map<String, String> handleValidationExceptions(\n           MethodArgumentNotValidException ex) {\n        Map<String, String> errors = new HashMap<>();\n        ex.getBindingResult().getAllErrors().forEach((error) -> {\n            String fieldName = ((FieldError) error).getField();\n            String errorMessage = error.getDefaultMessage();\n            errors.put(fieldName, errorMessage);\n        });\n        return errors;\n    }\n\n    public static CidadeDTO toDTO (Cidade cidade){\n        CidadeDTO dto = new CidadeDTO();\n        dto.setId(cidade.getId());\n        dto.setNome(cidade.getNome());\n        return dto;\n    }\n\n    public static Cidade fromDTO (CidadeDTO dto){\n        Cidade entity = new Cidade();\n        entity.setId(dto.getId());\n        entity.setNome(dto.getNome());\n        return entity;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/betha/projeto/projeto/resource/CidadeController.java b/src/main/java/com/betha/projeto/projeto/resource/CidadeController.java
--- a/src/main/java/com/betha/projeto/projeto/resource/CidadeController.java	(revision bba8dec6cf8795bdf68e6991b2ccf6612773587f)
+++ b/src/main/java/com/betha/projeto/projeto/resource/CidadeController.java	(date 1635604064474)
@@ -10,11 +10,9 @@
 import org.springframework.web.bind.annotation.*;
 
 import javax.persistence.EntityNotFoundException;
-import java.util.Collections;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
-import java.util.stream.Collector;
 import java.util.stream.Collectors;
 
 @RestController
@@ -44,7 +42,6 @@
     @PutMapping("/{id}")
     public Cidade update(@PathVariable(value = "id") Long cidadeId, @RequestBody Cidade cidade) throws EntityNotFoundException {
         Cidade cidadeFind = repository.findById(cidadeId).orElseThrow(() -> new EntityNotFoundException("Cidade não encontrada com 10::  "+cidadeId));
-        cidadeFind.setId(cidade.getId());
         cidadeFind.setNome(cidade.getNome());
 
         return repository.save(cidadeFind);
@@ -73,17 +70,4 @@
         return errors;
     }
 
-    public static CidadeDTO toDTO (Cidade cidade){
-        CidadeDTO dto = new CidadeDTO();
-        dto.setId(cidade.getId());
-        dto.setNome(cidade.getNome());
-        return dto;
-    }
-
-    public static Cidade fromDTO (CidadeDTO dto){
-        Cidade entity = new Cidade();
-        entity.setId(dto.getId());
-        entity.setNome(dto.getNome());
-        return entity;
-    }
 }
Index: src/main/java/com/betha/projeto/projeto/resource/EnderecoDTO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.betha.projeto.projeto.resource;\n\npublic class EnderecoDTO {\n    private Long id;\n    private String nome;\n\n   public EnderecoDTO(String cpf, String nome, String rg) {\n       this.id = id;\n       this.nome = nome;\n   }\n\n    public Long getId() {\n        return id;\n    }\n\n    public void setId(Long id) {\n        this.id = id;\n    }\n    public String getNome() {\n        return nome;\n    }\n\n    public String SetNome() {\n        return nome;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/betha/projeto/projeto/resource/EnderecoDTO.java b/src/main/java/com/betha/projeto/projeto/resource/EnderecoDTO.java
--- a/src/main/java/com/betha/projeto/projeto/resource/EnderecoDTO.java	(revision bba8dec6cf8795bdf68e6991b2ccf6612773587f)
+++ b/src/main/java/com/betha/projeto/projeto/resource/EnderecoDTO.java	(date 1635603930865)
@@ -1,9 +1,16 @@
 package com.betha.projeto.projeto.resource;
 
+
+import com.betha.projeto.projeto.model.Endereco;
+
 public class EnderecoDTO {
     private Long id;
     private String nome;
 
+    public EnderecoDTO() {
+
+    }
+
    public EnderecoDTO(String cpf, String nome, String rg) {
        this.id = id;
        this.nome = nome;
@@ -21,6 +28,18 @@
     }
 
     public String SetNome() {
-        return nome;
+
+       return nome;
     }
+    public static EnderecoDTO toDTO (Endereco endereco){
+        EnderecoDTO dto = new EnderecoDTO();
+        dto.setId(endereco.getId());
+        return dto;
+    }
+
+    public static Endereco fromDTO (EnderecoDTO dto){
+        Endereco entity = new Endereco();
+        entity.setId(dto.getId());
+        return entity;
+    }
 }
Index: src/main/java/com/betha/projeto/projeto/resource/ClienteController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.betha.projeto.projeto.resource;\n\nimport ch.qos.logback.core.net.server.Client;\nimport com.betha.projeto.projeto.model.Cidade;\nimport com.betha.projeto.projeto.model.Cliente;\nimport com.betha.projeto.projeto.repository.ClienteRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\nimport javax.persistence.EntityNotFoundException;\nimport java.util.List;\n\n@RestController\n@RequestMapping (\"/api/clientes/\")\npublic class ClienteController {\n\n    @Autowired\n    private ClienteRepository repository;\n\n    @GetMapping\n    public List<Cliente> getClientes() {\n\n        return repository.findAll();\n    }\n\n    @GetMapping(\"/{id}\")\n    public Cliente getClientesId(@PathVariable(value = \"id\") Long clienteId, @RequestBody Cliente cliente) throws EntityNotFoundException {\n        Cliente clienteFind = repository.findById(clienteId).orElseThrow(() ->new EntityNotFoundException(\"Cliente não encontrado com ID::\" +clienteId));\n        return clienteFind;\n    }\n\n    @PostMapping\n    public Cliente create(@RequestBody Cliente cliente) {\n\n        return repository.save(cliente);\n    }\n\n    @PutMapping(\"/{id}\")\n    public Cliente update(@PathVariable(value = \"id\") Long clienteId, @RequestBody Cliente cliente) throws EntityNotFoundException {\n        Cliente clienteFind = repository.findById(clienteId).orElseThrow(() -> new EntityNotFoundException(\"Cliente não encontrado com ID::  \"+clienteId));\n        clienteFind.setId(cliente.getId());\n        clienteFind.setNome(cliente.getNome());\n        clienteFind.setCpf(cliente.getCpf());\n        clienteFind.setRg(cliente.getRg());\n\n\n        return repository.save(clienteFind);\n\n    }\n\n    @DeleteMapping(\"/{id}\")\n    public ResponseEntity delete(@PathVariable(value = \"id\") Long id) throws EntityNotFoundException {\n        Cliente clienteFind = repository.findById(id)\n                .orElseThrow(() -> new EntityNotFoundException(\"Cliente não encontrado com ID::\" + id));\n\n        repository.delete(clienteFind);\n        return ResponseEntity.noContent().build();\n    }\n    public static ClienteDTO toDTO (Cliente cliente){\n        CidadeDTO dto = new ClienteDTO();\n        dto.setId(cliente.get());\n        dto.setNome(cliente.getNome());\n        return dto;\n    }\n\n    public static Cidade fromDTO (CidadeDTO dto){\n        Cidade entity = new Cidade();\n        entity.setId(dto.getId());\n        entity.setNome(dto.getNome());\n        return entity;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/betha/projeto/projeto/resource/ClienteController.java b/src/main/java/com/betha/projeto/projeto/resource/ClienteController.java
--- a/src/main/java/com/betha/projeto/projeto/resource/ClienteController.java	(revision bba8dec6cf8795bdf68e6991b2ccf6612773587f)
+++ b/src/main/java/com/betha/projeto/projeto/resource/ClienteController.java	(date 1635601910948)
@@ -1,6 +1,6 @@
 package com.betha.projeto.projeto.resource;
 
-import ch.qos.logback.core.net.server.Client;
+
 import com.betha.projeto.projeto.model.Cidade;
 import com.betha.projeto.projeto.model.Cliente;
 import com.betha.projeto.projeto.repository.ClienteRepository;
@@ -12,7 +12,7 @@
 import java.util.List;
 
 @RestController
-@RequestMapping ("/api/clientes/")
+@RequestMapping ("/api/clientes")
 public class ClienteController {
 
     @Autowired
@@ -58,8 +58,7 @@
         return ResponseEntity.noContent().build();
     }
     public static ClienteDTO toDTO (Cliente cliente){
-        CidadeDTO dto = new ClienteDTO();
-        dto.setId(cliente.get());
+        ClienteDTO dto = new ClienteDTO();
         dto.setNome(cliente.getNome());
         return dto;
     }
Index: src/main/java/com/betha/projeto/projeto/resource/EstoqueController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.betha.projeto.projeto.resource;\n\nimport com.betha.projeto.projeto.model.Estoque;\nimport com.betha.projeto.projeto.repository.EstoqueRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\nimport javax.persistence.EntityNotFoundException;\nimport java.util.List;\n\n@RestController\n@RequestMapping (\"/api/estoque/\")\npublic class EstoqueController {\n\n    @Autowired\n    private EstoqueRepository repository;\n\n    @GetMapping\n    public List<Estoque> getEstoques() {\n\n        return repository.findAll();\n    }\n\n    @GetMapping(\"/{id}\")\n    public Estoque getEstoquesId(@PathVariable(value = \"id\") Long estoqueId, @RequestBody Estoque estoque) throws EntityNotFoundException {\n        Estoque estoqueFind = repository.findById(estoqueId).orElseThrow(() ->new EntityNotFoundException(\"Estoque não encontrado com ID::\" +estoqueId));\n        return estoqueFind;\n    }\n\n\n    @PostMapping\n    public Estoque create(@RequestBody Estoque estoque) {\n        return repository.save(estoque);\n    }\n\n    @PutMapping(\"/{id}\")\n    public Estoque update(@PathVariable(value = \"id\") Long estoqueId, @RequestBody Estoque estoque) throws EntityNotFoundException {\n        Estoque estoqueFind = repository.findById(estoqueId).orElseThrow(() -> new EntityNotFoundException(\"Endereco não encontrado com ID::  \"+estoqueId));\n        estoqueFind.setId(estoque.getId());\n       estoqueFind.setDescricao(estoque.getDescricao());\n\n        return repository.save(estoqueFind);\n\n    }\n\n    @DeleteMapping(\"/{id}\")\n    public ResponseEntity delete(@PathVariable(value = \"id\") Long id) throws EntityNotFoundException {\n        Estoque estoqueFind = repository.findById(id).orElseThrow(() -> new EntityNotFoundException(\"Estoque não encontrado com ID::\" + id));\n\n        repository.delete(estoqueFind);\n        return ResponseEntity.noContent().build();\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/betha/projeto/projeto/resource/EstoqueController.java b/src/main/java/com/betha/projeto/projeto/resource/EstoqueController.java
--- a/src/main/java/com/betha/projeto/projeto/resource/EstoqueController.java	(revision bba8dec6cf8795bdf68e6991b2ccf6612773587f)
+++ b/src/main/java/com/betha/projeto/projeto/resource/EstoqueController.java	(date 1635604064491)
@@ -37,7 +37,6 @@
     @PutMapping("/{id}")
     public Estoque update(@PathVariable(value = "id") Long estoqueId, @RequestBody Estoque estoque) throws EntityNotFoundException {
         Estoque estoqueFind = repository.findById(estoqueId).orElseThrow(() -> new EntityNotFoundException("Endereco não encontrado com ID::  "+estoqueId));
-        estoqueFind.setId(estoque.getId());
        estoqueFind.setDescricao(estoque.getDescricao());
 
         return repository.save(estoqueFind);
Index: src/main/java/com/betha/projeto/projeto/resource/EstadoController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.betha.projeto.projeto.resource;\n\n\nimport com.betha.projeto.projeto.model.Estado;\nimport com.betha.projeto.projeto.repository.EstadoRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\nimport javax.persistence.EntityNotFoundException;\nimport java.util.List;\n\n@RestController\n@RequestMapping(\"/api/estados\")\npublic class EstadoController {\n\n    @Autowired\n    private EstadoRepository repository;\n\n    @GetMapping\n    public List<Estado> getEstados() {\n\n        return repository.findAll();\n    }\n\n    @GetMapping(\"/{id}\")\n    public Estado getEstadosId(@PathVariable(value = \"id\") Long estadoId, @RequestBody Estado estado) throws EntityNotFoundException {\n        Estado estadoFind = repository.findById(estadoId).orElseThrow(() ->new EntityNotFoundException(\"Estado não encontrado com ID::\" +estadoId));\n        return estadoFind;\n    }\n\n    @PostMapping\n    public Estado create(@RequestBody Estado estado) {\n        return repository.save(estado);\n    }\n\n    @PutMapping(\"/{id}\")\n    public Estado update(@PathVariable(value = \"id\") Long estadoId, @RequestBody Estado estado) throws EntityNotFoundException {\n       Estado estadoFind = repository.findById(estadoId).orElseThrow(() -> new EntityNotFoundException(\"Estado não encontrado com ID::  \"+estadoId));\n        estadoFind.setId(estado.getId());\n        estadoFind.setNome(estado.getNome());\n\n\n\n        return repository.save(estadoFind);\n\n    }\n\n    @DeleteMapping(\"/{id}\")\n    public ResponseEntity delete(@PathVariable(value = \"id\") Long id) throws EntityNotFoundException {\n        Estado estadoFind = repository.findById(id)\n                .orElseThrow(() -> new EntityNotFoundException(\"Estado não encontrado com ID::\" + id));\n\n        repository.delete(estadoFind);\n        return ResponseEntity.noContent().build();\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/betha/projeto/projeto/resource/EstadoController.java b/src/main/java/com/betha/projeto/projeto/resource/EstadoController.java
--- a/src/main/java/com/betha/projeto/projeto/resource/EstadoController.java	(revision bba8dec6cf8795bdf68e6991b2ccf6612773587f)
+++ b/src/main/java/com/betha/projeto/projeto/resource/EstadoController.java	(date 1635603930911)
@@ -37,11 +37,8 @@
     @PutMapping("/{id}")
     public Estado update(@PathVariable(value = "id") Long estadoId, @RequestBody Estado estado) throws EntityNotFoundException {
        Estado estadoFind = repository.findById(estadoId).orElseThrow(() -> new EntityNotFoundException("Estado não encontrado com ID::  "+estadoId));
-        estadoFind.setId(estado.getId());
         estadoFind.setNome(estado.getNome());
 
-
-
         return repository.save(estadoFind);
 
     }
Index: src/main/java/com/betha/projeto/projeto/model/TipoMovimentacao.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/betha/projeto/projeto/model/TipoMovimentacao.java b/src/main/java/com/betha/projeto/projeto/model/TipoMovimentacao.java
new file mode 100644
--- /dev/null	(date 1635601162311)
+++ b/src/main/java/com/betha/projeto/projeto/model/TipoMovimentacao.java	(date 1635601162311)
@@ -0,0 +1,7 @@
+package com.betha.projeto.projeto.model;
+
+public enum TipoMovimentacao {
+
+    ENTRADA,
+    SAIDA
+}
Index: src/main/java/com/betha/projeto/projeto/model/ContaUsuario.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/betha/projeto/projeto/model/ContaUsuario.java b/src/main/java/com/betha/projeto/projeto/model/ContaUsuario.java
new file mode 100644
--- /dev/null	(date 1635599219148)
+++ b/src/main/java/com/betha/projeto/projeto/model/ContaUsuario.java	(date 1635599219148)
@@ -0,0 +1,15 @@
+package com.betha.projeto.projeto.model;
+
+
+public class ContaUsuario {
+    private String nomeUsuario;
+    private String nomeCompleto;
+    private String senha;
+
+
+}
+// classe normal?
+// interface?
+// get e set??
+// construtor?
+// diferenciar admin de usuario simples
Index: src/main/java/com/betha/projeto/projeto/resource/FornecedorController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.betha.projeto.projeto.resource;\n\nimport com.betha.projeto.projeto.model.Cidade;\nimport com.betha.projeto.projeto.repository.CidadeRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.validation.FieldError;\nimport org.springframework.web.bind.MethodArgumentNotValidException;\nimport org.springframework.web.bind.annotation.*;\n\nimport javax.persistence.EntityNotFoundException;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n@RestController\n@RequestMapping()\npublic class FornecedorController {\n    @Autowired\n    private CidadeRepository repository;\n\n    @GetMapping\n    public List<Cidade> getCidades() {\n\n        return repository.findAll();\n    }\n\n    @GetMapping(\"/{id}\")\n    public Cidade getCidadesId(@PathVariable(value = \"id\") Long cidadeId, @RequestBody Cidade cidade) throws EntityNotFoundException {\n        Cidade cidadeFind = repository.findById(cidadeId).orElseThrow(() ->new EntityNotFoundException(\"Cidade não encontrado com ID::\" +cidadeId));\n        return cidadeFind;\n    }\n\n    @PostMapping\n    public Cidade create(@RequestBody Cidade cidade) {\n        return repository.save(cidade);\n    }\n\n    @PutMapping(\"/{id}\")\n    public Cidade update(@PathVariable(value = \"id\") Long cidadeId, @RequestBody Cidade cidade) throws EntityNotFoundException {\n        Cidade cidadeFind = repository.findById(cidadeId).orElseThrow(() -> new EntityNotFoundException(\"Cidade não encontrada com 10::  \"+cidadeId));\n        cidadeFind.setId(cidade.getId());\n        cidadeFind.setNome(cidade.getNome());\n\n        return repository.save(cidadeFind);\n\n    }\n\n    @DeleteMapping(\"/{id}\")\n    public ResponseEntity delete(@PathVariable(value = \"id\") Long id) throws EntityNotFoundException {\n        Cidade cidadeFind = repository.findById(id)\n                .orElseThrow(() -> new EntityNotFoundException(\"Cidade não encontrada com ID::\" + id));\n\n        repository.delete(cidadeFind);\n        return ResponseEntity.noContent().build();\n    }\n\n    @ResponseStatus(HttpStatus.BAD_REQUEST)\n    @ExceptionHandler(MethodArgumentNotValidException.class)\n    public Map<String, String> handleValidationExceptions(\n            MethodArgumentNotValidException ex) {\n        Map<String, String> errors = new HashMap<>();\n        ex.getBindingResult().getAllErrors().forEach((error) -> {\n            String fieldName = ((FieldError) error).getField();\n            String errorMessage = error.getDefaultMessage();\n            errors.put(fieldName, errorMessage);\n        });\n        return errors;\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/betha/projeto/projeto/resource/FornecedorController.java b/src/main/java/com/betha/projeto/projeto/resource/FornecedorController.java
--- a/src/main/java/com/betha/projeto/projeto/resource/FornecedorController.java	(revision bba8dec6cf8795bdf68e6991b2ccf6612773587f)
+++ b/src/main/java/com/betha/projeto/projeto/resource/FornecedorController.java	(date 1635599219090)
@@ -1,7 +1,9 @@
 package com.betha.projeto.projeto.resource;
 
 import com.betha.projeto.projeto.model.Cidade;
+import com.betha.projeto.projeto.model.Fornecedor;
 import com.betha.projeto.projeto.repository.CidadeRepository;
+import com.betha.projeto.projeto.repository.FornecedorRepository;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.http.HttpStatus;
 import org.springframework.http.ResponseEntity;
@@ -14,45 +16,46 @@
 import java.util.List;
 import java.util.Map;
 
-@RestController
-@RequestMapping()
-public class FornecedorController {
+    @RestController
+    @RequestMapping("/api/fornecedores")
+    public class FornecedorController {
     @Autowired
-    private CidadeRepository repository;
+    private FornecedorRepository repository;
 
     @GetMapping
-    public List<Cidade> getCidades() {
+    public List<Fornecedor> getCidades() {
 
         return repository.findAll();
     }
 
     @GetMapping("/{id}")
-    public Cidade getCidadesId(@PathVariable(value = "id") Long cidadeId, @RequestBody Cidade cidade) throws EntityNotFoundException {
-        Cidade cidadeFind = repository.findById(cidadeId).orElseThrow(() ->new EntityNotFoundException("Cidade não encontrado com ID::" +cidadeId));
-        return cidadeFind;
+    public Fornecedor getFornecedoresId(@PathVariable(value = "id") Long fornecedorId, @RequestBody Fornecedor fornecedor) throws EntityNotFoundException {
+        Fornecedor fornecedorFind = repository.findById(fornecedorId).orElseThrow(() ->new EntityNotFoundException("Fornecedor não encontrado com ID::" +fornecedorId));
+        return fornecedorFind;
     }
 
     @PostMapping
-    public Cidade create(@RequestBody Cidade cidade) {
-        return repository.save(cidade);
+    public Fornecedor create(@RequestBody Fornecedor fornecedor) {
+        return repository.save(fornecedor);
     }
 
     @PutMapping("/{id}")
-    public Cidade update(@PathVariable(value = "id") Long cidadeId, @RequestBody Cidade cidade) throws EntityNotFoundException {
-        Cidade cidadeFind = repository.findById(cidadeId).orElseThrow(() -> new EntityNotFoundException("Cidade não encontrada com 10::  "+cidadeId));
-        cidadeFind.setId(cidade.getId());
-        cidadeFind.setNome(cidade.getNome());
+    public Fornecedor update(@PathVariable(value = "id") Long fornecedorId, @RequestBody Fornecedor fornecedor) throws EntityNotFoundException {
+        Fornecedor fornecedorFind = repository.findById(fornecedorId).orElseThrow(() -> new EntityNotFoundException("Fornecedor não encontrado com ID::  "+fornecedorId));
+        fornecedorFind.setId(fornecedor.getId());
+        fornecedorFind.setNome(fornecedor.getNome());
+        fornecedorFind.setCnpj(fornecedor.getCnpj());
+        fornecedorFind.setTelefone(fornecedor.getTelefone());
 
-        return repository.save(cidadeFind);
+        return repository.save(fornecedorFind);
 
     }
 
     @DeleteMapping("/{id}")
     public ResponseEntity delete(@PathVariable(value = "id") Long id) throws EntityNotFoundException {
-        Cidade cidadeFind = repository.findById(id)
-                .orElseThrow(() -> new EntityNotFoundException("Cidade não encontrada com ID::" + id));
+        Fornecedor fornecedorFind = repository.findById(id).orElseThrow(() -> new EntityNotFoundException("Fornecedor não encontrado com ID::" + id));
 
-        repository.delete(cidadeFind);
+        repository.delete(fornecedorFind);
         return ResponseEntity.noContent().build();
     }
 
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"9a198898-80e6-4d93-9c94-6e0369d9c548\" name=\"Default Changelist\" comment=\"alteraçoes projeto\">\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"JavaFXApplication\" />\n        <option value=\"Interface\" />\n        <option value=\"Class\" />\n        <option value=\"Enum\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"ProjectId\" id=\"1x2bQsvdqzH9X0lLrXqux9Qgpeg\" />\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\n    <property name=\"SHARE_PROJECT_CONFIGURATION_FILES\" value=\"true\" />\n    <property name=\"project.structure.last.edited\" value=\"Project\" />\n    <property name=\"project.structure.proportion\" value=\"0.0\" />\n    <property name=\"project.structure.side.proportion\" value=\"0.2\" />\n    <property name=\"settings.editor.selected.configurable\" value=\"preferences.lookFeel\" />\n  </component>\n  <component name=\"RecentsManager\">\n    <key name=\"CreateClassDialog.RecentsKey\">\n      <recent name=\"com.betha.projeto.projeto.model\" />\n    </key>\n  </component>\n  <component name=\"RunManager\">\n    <configuration name=\"ProjetoApplication\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"com.betha.projeto.projeto.ProjetoApplication\" />\n      <module name=\"projeto\" />\n      <extension name=\"coverage\">\n        <pattern>\n          <option name=\"PATTERN\" value=\"com.betha.projeto.projeto.*\" />\n          <option name=\"ENABLED\" value=\"true\" />\n        </pattern>\n      </extension>\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <recent_temporary>\n      <list>\n        <item itemvalue=\"Application.ProjetoApplication\" />\n      </list>\n    </recent_temporary>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"9a198898-80e6-4d93-9c94-6e0369d9c548\" name=\"Default Changelist\" comment=\"\" />\n      <created>1629556125266</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1629556125266</updated>\n    </task>\n    <task id=\"LOCAL-00001\" summary=\"alteraçoes projeto\">\n      <created>1635022941752</created>\n      <option name=\"number\" value=\"00001\" />\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1635022941752</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"2\" />\n    <servers />\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State />\n          </value>\n        </entry>\n      </map>\n    </option>\n    <option name=\"oldMeFiltersMigrated\" value=\"true\" />\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <MESSAGE value=\"alteraçoes projeto\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"alteraçoes projeto\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision bba8dec6cf8795bdf68e6991b2ccf6612773587f)
+++ b/.idea/workspace.xml	(date 1635859436650)
@@ -5,7 +5,21 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="9a198898-80e6-4d93-9c94-6e0369d9c548" name="Default Changelist" comment="alteraçoes projeto">
+      <change afterPath="$PROJECT_DIR$/src/main/java/com/betha/projeto/projeto/model/ContaUsuario.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/java/com/betha/projeto/projeto/model/TipoMovimentacao.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/com/betha/projeto/projeto/model/Movimentacao.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/betha/projeto/projeto/model/Movimentacao.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/com/betha/projeto/projeto/resource/CidadeController.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/betha/projeto/projeto/resource/CidadeController.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/com/betha/projeto/projeto/resource/CidadeDTO.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/betha/projeto/projeto/resource/CidadeDTO.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/com/betha/projeto/projeto/resource/ClienteController.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/betha/projeto/projeto/resource/ClienteController.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/com/betha/projeto/projeto/resource/ClienteDTO.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/betha/projeto/projeto/resource/ClienteDTO.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/com/betha/projeto/projeto/resource/EnderecoDTO.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/betha/projeto/projeto/resource/EnderecoDTO.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/com/betha/projeto/projeto/resource/EstadoController.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/betha/projeto/projeto/resource/EstadoController.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/com/betha/projeto/projeto/resource/EstadoDTO.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/betha/projeto/projeto/resource/EstadoDTO.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/com/betha/projeto/projeto/resource/EstoqueController.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/betha/projeto/projeto/resource/EstoqueController.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/com/betha/projeto/projeto/resource/EstoqueDTO.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/betha/projeto/projeto/resource/EstoqueDTO.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/com/betha/projeto/projeto/resource/FornecedorController.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/betha/projeto/projeto/resource/FornecedorController.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/com/betha/projeto/projeto/resource/MovimentacaoController.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/betha/projeto/projeto/resource/MovimentacaoController.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
Index: src/main/java/com/betha/projeto/projeto/resource/MovimentacaoController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.betha.projeto.projeto.resource;\n\nimport com.betha.projeto.projeto.model.Cidade;\nimport com.betha.projeto.projeto.model.Movimentacao;\nimport com.betha.projeto.projeto.repository.CidadeRepository;\nimport com.betha.projeto.projeto.repository.MovimentacaoRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.validation.FieldError;\nimport org.springframework.web.bind.MethodArgumentNotValidException;\nimport org.springframework.web.bind.annotation.*;\n\nimport javax.persistence.EntityNotFoundException;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n    @RestController\n    @RequestMapping(\"/api/Movimentacoes\")\n    public class MovimentacaoController {\n\n        @Autowired\n        private MovimentacaoRepository repository;\n\n        @GetMapping\n        public List<Movimentacao> getMovimentacoes() {\n\n            return repository.findAll();\n        }\n\n        @GetMapping(\"/{id}\")\n        public Movimentacao getMovimentacoesId(@PathVariable(value = \"id\") Long MovimentacaoId, @RequestBody Movimentacao movimentacao) throws EntityNotFoundException {\n            Movimentacao movimentacaoFind = repository.findById(MovimentacaoId).orElseThrow(() -> new EntityNotFoundException(\"Movimentaçao não encontrada com ID:\" + MovimentacaoId));\n            return movimentacaoFind;\n        }\n\n        @PostMapping\n        public Movimentacao create(@RequestBody Movimentacao movimentacao) {\n            return repository.save(movimentacao);\n        }\n\n        @PutMapping(\"/{id}\")\n        public Movimentacao update(@PathVariable(value = \"id\") Long movimentacaoId, @RequestBody Movimentacao movimentacao) throws EntityNotFoundException {\n            Movimentacao movimentacaoFind = repository.findById(movimentacaoId).orElseThrow(() -> new EntityNotFoundException(\"Movimentacao não encontrada com 10:  \"+movimentacaoId));\n            movimentacaoFind.setId(movimentacao.getId());\n            movimentacaoFind.setMercadoria(movimentacao.getMercadoria());\n\n            return repository.save(movimentacaoFind);\n\n        }\n\n        @DeleteMapping(\"/{id}\")\n        public ResponseEntity delete(@PathVariable(value = \"id\") Long id) throws EntityNotFoundException {\n            Movimentacao movimentacaoFind = repository.findById(id)\n                    .orElseThrow(() -> new EntityNotFoundException(\"Movimentaçao não encontrada com ID:\" + id));\n\n            repository.delete(movimentacaoFind);\n            return ResponseEntity.noContent().build();\n        }\n\n        @ResponseStatus(HttpStatus.BAD_REQUEST)\n        @ExceptionHandler(MethodArgumentNotValidException.class)\n        public Map<String, String> handleValidationExceptions(\n                MethodArgumentNotValidException ex) {\n            Map<String, String> errors = new HashMap<>();\n            ex.getBindingResult().getAllErrors().forEach((error) -> {\n                String fieldName = ((FieldError) error).getField();\n                String errorMessage = error.getDefaultMessage();\n                errors.put(fieldName, errorMessage);\n            });\n            return errors;\n        }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/betha/projeto/projeto/resource/MovimentacaoController.java b/src/main/java/com/betha/projeto/projeto/resource/MovimentacaoController.java
--- a/src/main/java/com/betha/projeto/projeto/resource/MovimentacaoController.java	(revision bba8dec6cf8795bdf68e6991b2ccf6612773587f)
+++ b/src/main/java/com/betha/projeto/projeto/resource/MovimentacaoController.java	(date 1635601258079)
@@ -17,7 +17,7 @@
 import java.util.Map;
 
     @RestController
-    @RequestMapping("/api/Movimentacoes")
+    @RequestMapping("/api/movimentacoes")
     public class MovimentacaoController {
 
         @Autowired
